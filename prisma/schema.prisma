generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//// auth 
model User {
  id           Int            @id @default(autoincrement())
  googleId     String         @unique
  email        String         @unique
  name         String
  picture      String
  role         String?
  createdAt    DateTime       @default(now())
  session      Session[]
  GoogleTokens GoogleTokens[]
  Mailing      Mailing[]

  @@index([googleId], name: "google_id_index") // Add the index here
}

model Mailing {
  id                     Int       @id @default(autoincrement())
  userId                 Int       @unique
  Date_of_monthly_report DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  isSubscribed           Boolean   @default(true)

  // Enhanced email settings
  dayOfMonth        Int       @default(1)
  recipients        Json? // Stored as JSON string array of recipient objects
  subject           String?   @default("Monthly Inventory Report - {date}")
  includeReportUrl  Boolean   @default(true)
  lowStockThreshold Int       @default(5)
  lastSentAt        DateTime?

  user User @relation(fields: [userId], references: [id])

  @@index([userId], name: "mailing_user_id_index")
  @@index([dayOfMonth, isSubscribed], name: "mailing_schedule_index")
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id])
}

model GoogleTokens {
  id                          Int      @id @default(autoincrement())
  userId                      Int      @unique
  accessToken                 String
  accessTokenExpiresAt        DateTime
  accessTokenExpiresInSeconds Int
  idToken                     String
  refreshToken                String?
  scopes                      String
  tokenType                   String
  data                        Json?
  hasRefreshToken             Boolean  @default(false)
  hasScopes                   Boolean  @default(false)
  user                        User     @relation(fields: [userId], references: [id])

  @@map("google_tokens")
}

////  ferma
model Senzor {
  id             Int     @id @default(autoincrement())
  sensorName     String
  familyId       Int
  productId      Int
  frequency      String? // Dodano za frekvenco
  photograph     String?
  payloadDecoder String?
  decoder        Json?
  zpl            String?
  description    String?

  // Relacije
  components SenzorComponent[]
  stockItems SenzorStock[]
  sales      Sale[]
  orders     Order[]
}

model Component {
  id              Int     @id @default(autoincrement())
  name            String  @unique
  description     String?
  Component_price Float?
  treshold        Int? // Dodano za prag

  // Relacije
  senzorComponent SenzorComponent[]
  //sensors    SenzorComponent[]
  stockItems      ComponentStock[]
}

// Many-to-many relacija med senzorji in komponentami
model SenzorComponent {
  id               Int @id @default(autoincrement())
  senzorId         Int
  componentId      Int
  requiredQuantity Int @default(1)

  senzor    Senzor    @relation(fields: [senzorId], references: [id])
  component Component @relation(fields: [componentId], references: [id])

  @@unique([senzorId, componentId])
}

// Zaloga senzorjev
model SenzorStock {
  id                   Int             @id @default(autoincrement())
  senzorId             Int
  quantity             Int
  location             String
  frequency            String?
  productionBatch      Int?
  lastUpdated          DateTime        @default(now())
  category             String?
  senzor               Senzor          @relation(fields: [senzorId], references: [id])
  logs                 InventoryLog[]
  productionListId     Int? // <-- Add this line
  productionListDevEUI String? // Foreign key to ProductionList.DevEUI
  productionList       ProductionList? @relation(fields: [productionListDevEUI], references: [DevEUI])
}

// Zaloga komponent
model ComponentStock {
  id          Int      @id @default(autoincrement())
  componentId Int      @unique
  quantity    Int
  location    String
  lastUpdated DateTime @default(now())

  // Kontaktni podatki dobavitelja
  supplier       String?
  email          String?
  phone          String?
  category       String? // Kategorija komponent
  required       Boolean  @default(true) // Ali je komponenta obvezna za senzor
  // Povezava z računom
  invoiceFileKey String?
  invoiceId      Int?
  invoice        Invoice? @relation(fields: [invoiceId], references: [id])

  component Component      @relation(fields: [componentId], references: [id])
  logs      InventoryLog[]
}

// Model za račune
model Invoice {
  id              Int              @id @default(autoincrement())
  invoiceNumber   String           @unique
  uploadDate      DateTime         @default(now())
  supplier        String
  amount          Float?
  filename        String?
  fileData        Bytes? // Optional PDF binary
  componentStocks ComponentStock[]
  logs            InventoryLog[]
}

// Zgodovina sprememb
model InventoryLog {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  itemType  String // 'sensor' | 'component'
  itemName  String
  change    Int
  reason    String
  user      String
  details   String?
  invoiceId Int?
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])

  // Separate foreign keys
  senzorStockId    Int?
  componentStockId Int?

  senzorStock    SenzorStock?    @relation(fields: [senzorStockId], references: [id])
  componentStock ComponentStock? @relation(fields: [componentStockId], references: [id])
}

// Obstojči modeli (nespremenjeni)
model Sale {
  id           Int      @id @default(autoincrement())
  senzorId     Int
  quantity     Int
  saleDate     DateTime
  price        Float
  customerName String
  senzor       Senzor   @relation(fields: [senzorId], references: [id])
}

model Order {
  id              Int              @id @default(autoincrement())
  customerName    String
  assemblerName   String
  senzorId        Int
  quantity        Int
  frequency       String
  orderDate       DateTime
  otherParameters String?
  productionLists ProductionList[]
  senzor          Senzor           @relation(fields: [senzorId], references: [id])
}

model ProductionList {
  id                Int           @id @default(autoincrement())
  orderId           Int?
  DeviceType        String?
  DevEUI            String?       @unique
  AppEUI            String?
  AppKey            String?
  FrequencyRegion   String?
  SubBands          String?
  HWVersion         String?
  FWVersion         String?
  CustomFWVersion   String?
  SendPeriod        String?
  ACK               String?
  MovementThreshold String?
  order             Order?        @relation(fields: [orderId], references: [id], onDelete: SetNull)
  senzorStocks      SenzorStock[] // remains optional by default
  DateCreated       DateTime      @default(now())
  Batch             String?
}
